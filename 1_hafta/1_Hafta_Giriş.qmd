---
title: "1. Hafta: Giriş"
author: "Hakan Mehmetcik"
format: html
---

# **1. R ve R'ın Temel Yapısı**

## **R Dilinin Genel Özellikleri ve Kullanımı**

R, veri analizi, istatistiksel hesaplamalar ve grafiksel görselleştirme için tasarlanmış güçlü ve açık kaynaklı bir programlama dilidir. R’ın temel avantajlarından biri, akademik ve profesyonel dünyada geniş bir kullanım alanına sahip olmasıdır. R, özellikle büyük veri setleri üzerinde hızlı ve etkili analizler yapmayı sağlar.

## **R ile neler yapabilirsiniz**?

-   Sayısal veriler üzerinde işlem yapabilir, istatistiksel analizler gerçekleştirebilirsiniz.
-   Verilerinizi görselleştirmek için grafikler ve çizelgeler oluşturabilirsiniz.
-   Gelişmiş istatistiksel modeller kurabilir, veriler üzerinde tahminlerde bulunabilirsiniz.

## **R’ın Veri Analizi ve İstatistikteki Yeri**

R, özellikle veri bilimciler, istatistikçiler ve araştırmacılar tarafından veri analizi için yaygın olarak kullanılır. Akademik dünyada, bilimsel araştırmalarda ve iş dünyasında veri analizi için standart bir araçtır. Bunun nedeni R’ın geniş bir paket ekosistemine sahip olmasıdır; yani, özel amaçlar için kullanabileceğiniz binlerce hazır fonksiyon ve paket bulunur.

R’ın Avantajları: - Esneklik: R, çok farklı veri türleri ve analizlerle çalışmanıza olanak sağlar. - Geniş Paket Desteği: R, geniş bir topluluğa sahiptir ve hemen hemen her türlü veri analizi için uygun bir paket bulabilirsiniz (örneğin: `ggplot2`, `dplyr`, `tidyverse`). - Veri Görselleştirme: Grafiksel görselleştirme için R, güçlü araçlar sunar. Karmaşık veri setlerini kolayca anlaşılır grafiklere dönüştürebilirsiniz.

## **R'ı GitHub Codespaces Üzerinde Kullanmaya Başlama**

Bu derste, GitHub Codespaces kullanarak R ile çalışacağız. Codespaces, bulut tabanlı bir geliştirme ortamıdır. Yani, bilgisayarınıza herhangi bir yazılım yüklemeden GitHub üzerinde R projeleri geliştirebilirsiniz. GitHub Codespaces, R dili için hazır bir çalışma ortamı sağlar ve GitHub repository’nizle entegre bir şekilde çalışmanıza olanak tanır.

### **R ile GitHub Codespaces’te Çalışmaya Başlama Adımları:**

1.  Repository’ye Erişin: GitHub’da ders için oluşturulan repository’ye gidin (örneğin: [IST2083 GitHub Repository](https://github.com/HakanMehmetcik/IST2083.git)).
2.  Codespace’i Açın: Repository sayfasında "Code" butonuna tıklayın ve "Open with Codespaces" seçeneğini seçin.
3.  Ortamı Başlatın: Codespace, sizin için bir geliştirme ortamı oluşturacak. Bu ortamda R kodları yazabilir ve çalıştırabilirsiniz.
4.  Dosyalarla Çalışma: R dilinde yazılmış `.qmd` (Quarto) dosyalarını açarak ders notlarını inceleyebilir ve R konsolu üzerinde örnek kodları çalıştırabilirsiniz.

### **GitHub Codespaces’in Avantajları:**

-   Kurulum Gerektirmez: Hiçbir yazılım indirip kurmanıza gerek kalmaz, her şey tarayıcı üzerinde çalışır.
-   Bulut Tabanlı: Tüm verileriniz ve projeleriniz bulutta saklanır, böylece her yerden erişim sağlayabilirsiniz.
-   Anında Kullanıma Hazır: R dili ve ilgili paketler önceden yüklenmiştir; hemen kullanmaya başlayabilirsiniz.

**Sonuç Olarak:** R, veri analizi ve istatistik için en güçlü araçlardan biridir. GitHub Codespaces ise bu dili kullanmayı kolaylaştıran bir platform sunar. Bu derste, GitHub Codespaces kullanarak R ile nasıl çalışılacağını ve temel veri analizi kavramlarını öğrenmeye başlayacaksınız.

# **2. R Konsolu ve Temel Aritmetik İşlemler**

R, bir programlama dili olmasının yanı sıra, aynı zamanda bir hesap makinesi gibi basit matematiksel işlemler yapabileceğiniz bir ortam sağlar. R konsolunu kullanarak basit komutları hemen çalıştırabilirsiniz. Aşağıda R konsolunda nasıl çalışacağınızı ve temel matematiksel işlemleri nasıl gerçekleştireceğinizi öğreneceksiniz.

## **R Konsolunu Kullanarak Basit Komutlar Çalıştırma**

GitHub Codespaces’te R konsolunu açarak komutlar yazabilirsiniz. R konsolu, yazdığınız her komutu anında çalıştırır ve size sonucu gösterir. Örneğin, R konsoluna aşağıdaki gibi bir toplama işlemi yazabilirsiniz:

```{r}
3+5
```

Bu komutu çalıştırdığınızda, R size işlemin sonucunu gösterecektir:

``` r
[1] 8
```

## **Temel Matematiksel İşlemler**

R, toplama, çıkarma, çarpma ve bölme gibi temel matematiksel işlemleri doğrudan konsol üzerinde yapabilir. Aşağıda bazı temel matematiksel işlemlerin örnekleri verilmiştir:

### **Toplama**

İki sayıyı toplamak için `+` operatörünü kullanabilirsiniz:

``` r
10 + 7
```

Çıktı:

``` r
[1] 17
```

### **Çıkarma**

Çıkarma işlemi için `-` operatörünü kullanabilirsiniz:

``` r
15 - 3
```

Çıktı:

``` r
[1] 12
```

### **Çarpma**

Çarpma işlemi için `*` operatörünü kullanabilirsiniz:

``` r
6 * 4
```

Çıktı:

``` r
[1] 24
```

### **Bölme**

Bölme işlemi için `/` operatörünü kullanabilirsiniz:

``` r
20 / 4
```

Çıktı:

``` r
[1] 5
```

### **Üs Alma**

R, üs alma işlemi için `^` operatörünü kullanır:

``` r
2^3
```

Çıktı:

``` r
[1] 8
```

## **Hata Mesajlarını Anlama ve Çözme**

R ile çalışırken bazen hatalarla karşılaşabilirsiniz. Hatalar, kodunuzda bir sorun olduğunu ve R’ın bunu çalıştıramadığını belirtir. Ancak endişelenmenize gerek yok, bu hatalar çoğunlukla küçük yazım veya kullanım hatalarından kaynaklanır.

### **Örnek Bir Hata:**

Aşağıdaki komutta `*` yerine `x` yazıldığı için bir hata oluşacaktır:

``` r
3 x 5
```

Çıktı:

``` r
Error: unexpected symbol in "3 x"
```

Bu hata, R’ın `x` sembolünü tanımadığını ve bu yüzden işlemi gerçekleştiremediğini belirtir. Bu hatayı düzeltmek için `x` sembolünü `*` ile değiştirebilirsiniz:

``` r
3 * 5
```

Bu sefer doğru sonuç olan `15` çıktısını elde edeceksiniz.

### **Genel Hata Çözme İpuçları:**

1.  Sembolleri Doğru Kullanın: R'da toplama için `+`, çarpma için `*`, bölme için `/` gibi semboller kullanılır. Yanlış bir sembol kullanırsanız hata alırsınız.
2.  Kodunuzda Yazım Hataları Olup Olmadığını Kontrol Edin: R büyük/küçük harfe duyarlıdır, yani `A` ve `a` R için farklı şeyler ifade eder. Yazım hatalarına dikkat edin.
3.  Hata Mesajını Dikkatlice Okuyun: R’ın verdiği hata mesajları, sorunun ne olduğunu anlamanıza yardımcı olabilir. Örneğin, yukarıdaki hata mesajı, "unexpected symbol" ifadesiyle bir sembol hatası olduğunu belirtmiştir.

------------------------------------------------------------------------

# **3. Değişkenler ve Veri Türleri**

R dilinde, verileri saklamak ve işlemek için değişkenler kullanılır. Değişkenler, belirli bir değeri tutar ve bu değer üzerinde işlemler yapmanıza olanak tanır.

Değişken Tanımlama (\<- Operatörü) R’da bir değişken tanımlamak için \<- operatörü kullanılır. Bu operatör, sağdaki değeri soldaki değişkene atar.

``` r
x <- 10   # x değişkenine 10 değerini atar
y <- "Merhaba"   # y değişkenine bir karakter dizisi atar
```

## **R'da Veri Türleri**

R’da değişkenlerin farklı veri türleri olabilir. R’ın sık kullanılan veri türleri şunlardır:

-   **Sayısal (Numeric)**: Ondalıklı veya tam sayı olarak saklanan sayılar.

    ```{r}
    a <- 5.7 # Ondalıklı bir sayısal veri 
    b <- 10 # Tam sayı olarak bir sayısal veri
    ```

-   **Karakter (Character)**: Metin veya harf dizisi olarak saklanan veriler.

    ```{r}
    c <- "R programlama dili" # Karakter veri türünde bir veri
    ```

-   **Mantıksal (Logical)**: TRUE veya FALSE değerlerini saklayan değişkenler.

    ```{r}
    durum <- TRUE   # Logical
    ```

## Değişkenlerle Matematiksel İşlemler

Sayısal veri türüne sahip değişkenlerde matematiksel işlemler yapabilirsiniz. Örneğin:

```{r}
a <- 5 
b <- 3
```

# Toplama

```{r}
toplam <- a + b 
print(toplam) # Çıktı: 8
```

# Çıkarma

```{r}
cikarma <- a - b 
print(cikarma) # Çıktı: 2
```

# Çarpma

```{r}
a*b # Çıktı: 15
```

# Bölme

```{r}
bolme <- a / b 
print(bolme) # Çıktı: 1.666667
```

# Üs Alma

```{r}
us <- a^b 
print(us) # Çıktı: 125
```

# 4. R'da Temel Fonksiyonlar

R programlama dilinde temel fonksiyonlar, veri analizi ve istatistiksel hesaplamalar için yaygın olarak kullanılır. İşte bazı temel fonksiyonlar ve örnek kullanımları:

R’ın Yerleşik Fonksiyonları Yerleşik fonksiyonlar, R dilinin varsayılan olarak sunduğu işlevlerdir. Örneğin, mean() fonksiyonu bir vektörün ortalamasını hesaplar, sum() toplamını verir ve length() bir vektörün kaç eleman içerdiğini gösterir.

Örnekler: 1. print(): Bir nesneyi konsola yazdırır.

```{r}
print("Merhaba Dünya")
```

2.  sum(): Bir vektörün elemanlarının toplamını hesaplar.

    ```{r}
     toplam <- sum(c(1, 2, 3, 4, 5))
    ```

3.  mean(): Bir vektörün elemanlarının ortalamasını hesaplar.

    ```{r}
    ortalama <- mean(c(1, 2, 3, 4, 5))
    ```

4.  sd(): Bir vektörün standart sapmasını hesaplar.

    ```{r}
    standart_sapma <- sd(c(1, 2, 3, 4, 5))
    ```

5.  length(): Bir vektörün uzunluğunu döndürür.

    ```{r}
    uzunluk <- length(c(1, 2, 3, 4, 5))
    ```

6.  seq(): Belirli bir aralıkta ardışık sayılar oluşturur.

    ```{r}
    dizi <- seq(1, 10, by=2)
    ```

7.  rep(): Bir değeri belirli sayıda tekrar eder

    ```{r}
    tekrar <- rep(1, times=5)
    ```

8.  c(): Vektör oluşturur.

    ```{r}
    vektor <- c(1, 2, 3, 4, 5)
    ```

9.  data.frame(): Veri çerçevesi oluşturur.

    ```{r}
    veri <- data.frame( isim = c("Ali", "Ayşe", "Fatma"), yas = c(25, 30, 35) )
    ```

10. summary(): Bir nesnenin özet istatistiklerini döndürür.

    ```{r}
    ozet <- summary(c(1, 2, 3, 4, 5))
    ```

## Parametrelerle Fonksiyon Kullanımı
Fonksiyonlar, belirli bir işlevi gerçekleştirmek için parametre alabilir. Parametreler, fonksiyonun nasıl çalışacağını belirler. Örneğin, mean() fonksiyonuna na.rm = TRUE parametresi eklenerek eksik değerleri göz ardı edebilirsiniz.
```{r}
sayilar <- c(10, 20, NA, 40, 50)
ortalama <- mean(sayilar, na.rm = TRUE)   # NA değerini göz ardı ederek ortalama hesaplar
```

## Fonksiyon Oluşturma
R dilinde kendi fonksiyonlarınızı oluşturmak oldukça basittir. Fonksiyonlar, belirli bir işlevi gerçekleştirmek için bir dizi komut içerir ve gerektiğinde parametreler alabilir. Fonksiyonlar, function anahtar kelimesi kullanılarak tanımlanır.

Fonksiyon Oluşturma
Bir fonksiyon oluşturmak için aşağıdaki adımları izleyebilirsiniz:

- function anahtar kelimesini kullanarak fonksiyonunuzu tanımlayın.
- Fonksiyonun alacağı parametreleri parantez içinde belirtin.
- Fonksiyonun gövdesinde, fonksiyonun gerçekleştireceği işlemleri yazın.
- return() fonksiyonunu kullanarak fonksiyonun döndüreceği değeri belirtin (isteğe bağlı).

```{r}
# Toplama fonksiyonu oluşturma
topla <- function(a, b) {
  sonuc <- a + b
  return(sonuc)
}

# Fonksiyonu çağırma
toplam <- topla(5, 3)
print(toplam)  # 8
```

# 5. R’da Yardım Alma
R, fonksiyonlar ve komutlar hakkında bilgi almak için yerleşik bir yardım sistemi sunar. Özellikle yeni başlayanlar için R’ın yardım sistemi oldukça faydalıdır.

R Fonksiyonları İçin Yardım Alma ( ? ve help() Komutları)
Bir R fonksiyonu hakkında bilgi almak için ? veya help() komutlarını kullanabilirsiniz. Bu komutlar, ilgili fonksiyonun nasıl kullanılacağı ve parametrelerinin ne olduğu hakkında detaylı bilgi verir.

**Örnekler**:

```{r}
?mean   # mean() fonksiyonu hakkında yardım alır
help(sum)  # sum() fonksiyonu hakkında yardım alır
```

Bu komutlar, fonksiyonun açıklamasını, hangi argümanları kabul ettiğini ve nasıl çalıştırılacağını gösteren bir dokümantasyon penceresi açar.

## Belgeleme ve Fonksiyonların Anlamı
R’ın tüm fonksiyonlarının nasıl çalıştığını, örnekler ve açıklamalarla birlikte görebilirsiniz. R'da her fonksiyonun geniş bir açıklaması bulunur ve bu belgeleme, fonksiyonların nasıl kullanılacağını öğrenmenin etkili bir yoludur.

**Örnek**:

```{r}
help(mean)  # Ortalama hesaplayan mean() fonksiyonunu anlamak için yardım alabiliriz
```

# 6. Basit Veri Yapıları
R dilinde, veriler çeşitli veri yapıları kullanılarak organize edilir. Temel veri yapıları, vektörler, listeler ve matrislerdir.

## Vektörler
R dilinde en temel veri yapılarından biri vektörlerdir. Vektörler, aynı veri türüne sahip bir dizi elemanı saklar. Vektör oluşturmak için c() fonksiyonu kullanılır.

```{r}
# Sayısal vektör oluşturma
numeric_vector <- c(1, 2, 3, 4, 5)

# Karakter vektör oluşturma
character_vector <- c("a", "b", "c", "d")

# Mantıksal vektör oluşturma
logical_vector <- c(TRUE, FALSE, TRUE)

# Vektör elemanlarına erişim
print(numeric_vector[1])  # 1
print(character_vector[3])  # "c"

# Vektör elemanlarını güncelleme
numeric_vector[2] <- 10

# Vektör toplama
sum_vector <- numeric_vector + c(1, 1, 1, 1, 1)

# Vektör elemanlarının toplamı
total_sum <- sum(numeric_vector)

# Güncellenmiş vektörleri yazdırma
print(numeric_vector)
print(sum_vector)
print(total_sum)
```

## Listeler
Listeler, farklı türdeki verileri bir arada saklayabilen veri yapılarıdır. Bir liste içinde sayılar, karakterler, mantıksal değerler ve hatta başka vektörler bulunabilir.

```{r}
# Liste oluşturma
my_list <- list(number = 5, greeting = "Hello", flag = TRUE, numbers = c(1, 2, 3))

# Liste elemanlarına erişim
print(my_list$number)  # 5
print(my_list$greeting)  # "Hello"
print(my_list$flag)  # TRUE
print(my_list$numbers)  # c(1, 2, 3)

# Liste elemanlarını güncelleme
my_list$number <- 10
my_list$greeting <- "Hi"

# Listeye yeni eleman ekleme
my_list$new_element <- "New Element"

# Liste elemanlarını silme
my_list$new_element <- NULL

# Güncellenmiş listeyi yazdırma
print(my_list)
```

## Matrisler
Matrisler, satırlar ve sütunlar şeklinde organize edilmiş sayısal veri yapılarıdır. Tüm elemanlar aynı türde olmalıdır.

```{r}
# 2x3 boyutunda bir matris oluşturma
my_matrix <- matrix(1:6, nrow = 2, ncol = 3)

# Matris elemanlarına erişim
print(my_matrix[1, 2])  # 3
print(my_matrix[2, ])  # c(4, 5, 6)
print(my_matrix[, 3])  # c(5, 6)

# Matris elemanlarını güncelleme
my_matrix[1, 2] <- 10

# Matris toplama
matrix1 <- matrix(1:4, nrow = 2)
matrix2 <- matrix(5:8, nrow = 2)
sum_matrix <- matrix1 + matrix2

# Matris çarpma
product_matrix <- matrix1 %*% matrix2

# Güncellenmiş matrisleri yazdırma
print(my_matrix)
print(sum_matrix)
print(product_matrix)
```

## Data Framler 
Data frameler, R dilinde kullanılan ve farklı veri türlerine sahip sütunları içerebilen iki boyutlu veri yapılarıdır. Data frameler, genellikle tablo şeklinde verileri saklamak için kullanılır ve her sütun bir vektör olarak temsil edilir. Data frameler, data.frame() fonksiyonu kullanılarak oluşturulur.

```{r}
# Data frame oluşturma
my_data_frame <- data.frame(
  numbers = c(1, 2, 3, 4, 5),
  letters = c("a", "b", "c", "d", "e"),
  logicals = c(TRUE, FALSE, TRUE, FALSE, TRUE)
)

# Data frame elemanlarına erişim
print(my_data_frame[1, 2])  # "a"
print(my_data_frame[2, ])  # c(2, "b", FALSE)
print(my_data_frame[, 3])  # c(TRUE, FALSE, TRUE, FALSE, TRUE)
print(my_data_frame$numbers)  # c(1, 2, 3, 4, 5)

# Data frame elemanlarını güncelleme
my_data_frame[1, 2] <- "z"
my_data_frame$numbers[2] <- 10

# Yeni bir sütun ekleme
my_data_frame$new_column <- c(10, 20, 30, 40, 50)

# Satır ekleme
new_row <- data.frame(numbers = 6, letters = "f", logicals = FALSE, new_column = 60)
my_data_frame <- rbind(my_data_frame, new_row)

# Sütun ekleme
new_column <- c(100, 200, 300, 400, 500, 600)
my_data_frame <- cbind(my_data_frame, new_column)

# Güncellenmiş data frame'i yazdırma
print(my_data_frame)
```

![](https://th.bing.com/th/id/OIP.JjZYjvyBurwgQa1RBRtzAAAAAA?rs=1&pid=ImgDetMain)

# 7. Veri İçe Aktarma ve Kaydetme
Veri içe aktarma ve temel manipülasyon, veri analizi sürecinin önemli adımlarıdır. R dilinde veri içe aktarma ve temel manipülasyon işlemleri için çeşitli fonksiyonlar ve paketler kullanılır.

## Veri İçe Aktarma
R dilinde veri içe aktarmak için read.csv(), read.table(), read_excel() gibi fonksiyonlar kullanılır.

```{r}
# CSV dosyasını içe aktarma
data <- read.csv("https://raw.githubusercontent.com/datasciencedojo/datasets/refs/heads/master/titanic.csv")   # ("path/to/your/file.csv")
```


```{r}
# readxl paketini yükleme
install.packages("readxl")
library(readxl)

# Excel dosyasını içe aktarma
# data <- read_excel("https://github.com/HakanMehmetcik/IST2083/blob/main/Data/sample_excel.xlsx")
```
## Veri Kaydetme
R dilinde veri kaydetmek için çeşitli fonksiyonlar kullanabilirsiniz. En yaygın kullanılan dosya formatları arasında CSV, Excel ve RDS dosyaları bulunur.

**CSV Dosyasına Veri Kaydetme**
Veri çerçevesini CSV dosyasına kaydetmek için write.csv() fonksiyonunu kullanabilirsiniz:

```{r}
# Veri çerçevesini CSV dosyasına kaydetme
# write.csv(data, "path/to/your/file.csv", row.names = FALSE)
```

**Excel Dosyasına Veri Kaydetme**
Excel dosyasına veri kaydetmek için writexl paketini kullanabilirsiniz:

```{r}
# writexl paketini yükleme
install.packages("writexl")
library(writexl)

# Veri çerçevesini Excel dosyasına kaydetme
# write_xlsx(data, "path/to/your/file.xlsx")
```

## Veri Yapısını İnceleme
Veri inceleme, veri analizi sürecinin önemli bir parçasıdır. R dilinde veri incelemek için çeşitli fonksiyonlar ve paketler kullanabilirsiniz. Bu işlemler arasında veri yapısını kontrol etme, özet istatistikler oluşturma ve veri görselleştirme gibi işlemler bulunur. 
Veri yapısını incelemek için str(), summary(), head(), ve tail() fonksiyonlarını kullanabilirsiniz. 

```{r}
# Veri yapısını kontrol etme
str(data)
# Özet istatistikler
summary(data)
# İlk birkaç satırı görüntüleme
head(data)

# Son birkaç satırı görüntüleme
tail(data)
```

